use anyhow::Result;
use async_openai::types::Image;
use base64::Engine;
use std::path::{Path, PathBuf};

/// An image generated by an LVM provider
#[derive(Debug)]
pub struct LvmImage {
    /// The base64-encoded image data
    pub data: Vec<u8>,
    /// Metadata associated with the image
    pub metadata: Option<LvmImageMetadata>,
}

/// Metadata associated with an LVM image
#[derive(Debug)]
pub struct LvmImageMetadata {
    pub generation_params: Option<String>,
}

impl From<Image> for LvmImage {
    fn from(image: Image) -> Self {
        match image {
            Image::Url {
                url: _,
                revised_prompt,
            } => LvmImage {
                data: Vec::new(),
                metadata: Some(LvmImageMetadata {
                    generation_params: Some(revised_prompt.unwrap_or_default()),
                }),
            },
            Image::B64Json {
                b64_json,
                revised_prompt,
            } => LvmImage {
                data: b64_json.as_bytes().to_vec(),
                metadata: Some(LvmImageMetadata {
                    generation_params: Some(revised_prompt.unwrap_or_default()),
                }),
            },
        }
    }
}

impl LvmImage {
    /// Save the image to a file and return the path to the file.
    pub fn to_file(&self, path: &Path) -> Result<PathBuf> {
        // Check that file_path is not a directory.
        if path.is_dir() {
            return Err(anyhow::anyhow!("file_path must be a file path."));
        }
        let image = base64::prelude::BASE64_STANDARD.decode(self.data.clone())?;
        std::fs::write(path, image)?;
        Ok(path.to_path_buf())
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use tempfile::tempdir;

    #[test]
    fn to_file() {
        let image = "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAABjElEQVR42mNk".to_string();
        let dir = tempdir().unwrap();
        let path = dir.path().join("image.png");
        let lvm_image = LvmImage {
            data: image.as_bytes().to_vec(),
            metadata: None,
        };
        let result = lvm_image.to_file(&path);
        assert!(result.is_ok());
    }
}
